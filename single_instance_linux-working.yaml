AWSTemplateFormatVersion: '2010-09-09'
Description: VDC Centos 7 + helper scripts
Parameters:
  InstanceAmi:
    Description: Instance AMI
    Type: String
  InstanceProfile:
    Description: Default instance profile
    Type: String
    Default: BTSManagedInstanceProfile
    ConstraintDescription: Must be BTSManagedInstanceProfile
    AllowedValues:
      - BTSManagedInstanceProfile
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  HostName:
    Type: String
    MaxLength: 15
    Default: amapocmoh-4
    Description: Name of the host
  SystemOwner:
    Type: String
    Description: Emails address of technical point of contact for the server.
    Default: ""
  OS:
    Type: String
    Description: Enter OS
  InstanceType:
    Description: EC2 instance types
    Type: String
    Default: t2.micro
    AllowedValues:
# General Purpose
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
# Compute Optimized
      - c5.large 
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge 
# Memory Optimized
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  LinuxSecurityGroup:
    Description: Choose the default platform security group
    Type: AWS::EC2::SecurityGroup::Id
    ConstraintDescription: Must be default Linux security group
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Enter the SubnetId of the subnet
    ConstraintDescription: Must be a valid Subnet ID

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT7M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install:
          - install_and_enable_cfn_hup
        install_and_enable_cfn_hup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Join:
                - ""
                - - "[main]\n"
                  - stack=
                  - Ref: AWS::StackId
                  - "\n"
                  - region=
                  - Ref: AWS::Region
                  - "\n"
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Join:
                - ""
                - - "[cfn-auto-reloader-hook]\n"
                  - "triggers=post.update\n"
                  - "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n"
                  - "action=/opt/aws/bin/cfn-init -v "
                  - " --stack "
                  - Ref: AWS::StackName
                  - " --resource EC2Instance "
                  - " --configsets full_install "
                  - " --region "
                  - Ref: AWS::Region
                  - "\n"
                  - "runas=root\n"
            #"/lib/systemd/system/cfn-hup.service":
            #  content:
            #    Fn::Join:
            #    - ""
            #    - - "[Unit]\n"
            #      - "Description=cfn-hup daemon\n\n"
            #      - "[Service]\n"
            #      - "Type=simple\n"
            #      - "ExecStart=/opt/aws/bin/cfn-hup\n"
            #      - "Restart=always\n\n"
            #      - "[Install]\n"
            #      - "WantedBy=multi-user.target\n"

          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service

    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref LinuxSecurityGroup
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceAmi
      BlockDeviceMappings:
        - DeviceName: '/dev/sda1'
          Ebs:
            VolumeSize: 8
            VolumeType: 'gp2'
            DeleteOnTermination: 'true'
      SubnetId: !Ref SubnetId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash -xe\n"
              - "yum update -y\n"
              #- "yum install -y epel-release\n"
              #- "yum install -y https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm\n"
              #- "ln -s /usr/local/lib/python2.7/site-packages/cfnbootstrap /usr/lib/python2.7/site-packages/cfnbootstrap\n"
              - "/opt/aws/bin/cfn-init -v "
              - "--stack "
              - Ref: AWS::StackName
              - " --resource EC2Instance "
              - "--configsets full_install "
              - "--region "
              - Ref: AWS::Region
              - "\n"
              - "/opt/aws/bin/cfn-signal -e $? "
              - " --stack "
              - Ref: AWS::StackName
              - " --resource EC2Instance "
              - " --region "
              - Ref: AWS::Region
              - "\n"
      Tags:
        - Key: Name
          Value:  !Ref HostName
        - Key: SystemOwner
          Value: !Ref SystemOwner
        - Key: OS
          Value: !Ref OS

Outputs:
  EC2InstanceId:
    Description: Instance ID
    Value: !Ref EC2Instance
  EC2InstancePrivateIp:
    Description: Instance Private IP address
    Value: !GetAtt EC2Instance.PrivateIp